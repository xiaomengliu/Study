{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "236cf8d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "### create conda environment\n",
    "#conda env remove -n myenv\n",
    "#conda env list\n",
    "#conda create --name myenv --clone base\n",
    "\n",
    "### create fastai conda environment\n",
    "### fastai & pytorch支持python 3.11之前的版本\n",
    "### run in the terminal\n",
    "conda create -n fastai python=3.11.13   \n",
    "conda activate fastai \n",
    "conda install ipython  \n",
    "conda install -c fastai -c pytorch fastai\n",
    "conda update numpy\n",
    "\n",
    "### 查看当前工作目录\n",
    "import os\n",
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bb94ecb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastai.vision.all import *\n",
    "path = untar_data(URLs.PETS)/'images'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "51302e4c",
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Numpy is not available",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mRuntimeError\u001b[39m                              Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[13]\u001b[39m\u001b[32m, line 3\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mis_cat\u001b[39m(x):\u001b[38;5;28;01mreturn\u001b[39;00m x[\u001b[32m0\u001b[39m].isupper()\n\u001b[32m----> \u001b[39m\u001b[32m3\u001b[39m dls = \u001b[43mImageDataLoaders\u001b[49m\u001b[43m.\u001b[49m\u001b[43mfrom_name_func\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m    \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43mget_image_files\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mvalid_pct\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m0.2\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43mseed\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m42\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      5\u001b[39m \u001b[43m    \u001b[49m\u001b[43mlabel_func\u001b[49m\u001b[43m=\u001b[49m\u001b[43mis_cat\u001b[49m\u001b[43m,\u001b[49m\u001b[43mitem_tfms\u001b[49m\u001b[43m=\u001b[49m\u001b[43mResize\u001b[49m\u001b[43m(\u001b[49m\u001b[32;43m224\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      6\u001b[39m \u001b[43m)\u001b[49m\n\u001b[32m      7\u001b[39m learn = cnn_learner(dls,resnet34,metrics=error_rate)\n\u001b[32m      8\u001b[39m learn.fine_tune(\u001b[32m1\u001b[39m)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/vision/data.py:151\u001b[39m, in \u001b[36mImageDataLoaders.from_name_func\u001b[39m\u001b[34m(cls, path, fnames, label_func, **kwargs)\u001b[39m\n\u001b[32m    149\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mlabel_func couldn\u001b[39m\u001b[33m'\u001b[39m\u001b[33mt be lambda function on Windows\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m    150\u001b[39m f = using_attr(label_func, \u001b[33m'\u001b[39m\u001b[33mname\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m--> \u001b[39m\u001b[32m151\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfrom_path_func\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfnames\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/vision/data.py:137\u001b[39m, in \u001b[36mImageDataLoaders.from_path_func\u001b[39m\u001b[34m(cls, path, fnames, label_func, valid_pct, seed, item_tfms, batch_tfms, img_cls, **kwargs)\u001b[39m\n\u001b[32m    131\u001b[39m \u001b[33m\"\u001b[39m\u001b[33mCreate from list of `fnames` in `path`s with `label_func`\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    132\u001b[39m dblock = DataBlock(blocks=(ImageBlock(img_cls), CategoryBlock),\n\u001b[32m    133\u001b[39m                    splitter=RandomSplitter(valid_pct, seed=seed),\n\u001b[32m    134\u001b[39m                    get_y=label_func,\n\u001b[32m    135\u001b[39m                    item_tfms=item_tfms,\n\u001b[32m    136\u001b[39m                    batch_tfms=batch_tfms)\n\u001b[32m--> \u001b[39m\u001b[32m137\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfrom_dblock\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdblock\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfnames\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m=\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/core.py:275\u001b[39m, in \u001b[36mDataLoaders.from_dblock\u001b[39m\u001b[34m(cls, dblock, source, path, bs, val_bs, shuffle, device, **kwargs)\u001b[39m\n\u001b[32m    264\u001b[39m \u001b[38;5;129m@classmethod\u001b[39m\n\u001b[32m    265\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mfrom_dblock\u001b[39m(\u001b[38;5;28mcls\u001b[39m, \n\u001b[32m    266\u001b[39m     dblock, \u001b[38;5;66;03m# `DataBlock` object\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m    273\u001b[39m     **kwargs\n\u001b[32m    274\u001b[39m ):\n\u001b[32m--> \u001b[39m\u001b[32m275\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdblock\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdataloaders\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m=\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbs\u001b[49m\u001b[43m=\u001b[49m\u001b[43mbs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mval_bs\u001b[49m\u001b[43m=\u001b[49m\u001b[43mval_bs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mshuffle\u001b[49m\u001b[43m=\u001b[49m\u001b[43mshuffle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/block.py:157\u001b[39m, in \u001b[36mDataBlock.dataloaders\u001b[39m\u001b[34m(self, source, path, verbose, **kwargs)\u001b[39m\n\u001b[32m    151\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mdataloaders\u001b[39m(\u001b[38;5;28mself\u001b[39m, \n\u001b[32m    152\u001b[39m     source, \u001b[38;5;66;03m# The data source\u001b[39;00m\n\u001b[32m    153\u001b[39m     path:\u001b[38;5;28mstr\u001b[39m=\u001b[33m'\u001b[39m\u001b[33m.\u001b[39m\u001b[33m'\u001b[39m, \u001b[38;5;66;03m# Data source and default `Learner` path \u001b[39;00m\n\u001b[32m    154\u001b[39m     verbose:\u001b[38;5;28mbool\u001b[39m=\u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;66;03m# Show verbose messages\u001b[39;00m\n\u001b[32m    155\u001b[39m     **kwargs\n\u001b[32m    156\u001b[39m ) -> DataLoaders:\n\u001b[32m--> \u001b[39m\u001b[32m157\u001b[39m     dsets = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mdatasets\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[43m=\u001b[49m\u001b[43mverbose\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    158\u001b[39m     kwargs = {**\u001b[38;5;28mself\u001b[39m.dls_kwargs, **kwargs, \u001b[33m'\u001b[39m\u001b[33mverbose\u001b[39m\u001b[33m'\u001b[39m: verbose}\n\u001b[32m    159\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m dsets.dataloaders(path=path, after_item=\u001b[38;5;28mself\u001b[39m.item_tfms, after_batch=\u001b[38;5;28mself\u001b[39m.batch_tfms, **kwargs)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/block.py:147\u001b[39m, in \u001b[36mDataBlock.datasets\u001b[39m\u001b[34m(self, source, verbose)\u001b[39m\n\u001b[32m    145\u001b[39m \u001b[38;5;28mself\u001b[39m.source = source                     ; pv(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mCollecting items from \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msource\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m, verbose)\n\u001b[32m    146\u001b[39m items = (\u001b[38;5;28mself\u001b[39m.get_items \u001b[38;5;129;01mor\u001b[39;00m noop)(source) ; pv(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mFound \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(items)\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m items\u001b[39m\u001b[33m\"\u001b[39m, verbose)\n\u001b[32m--> \u001b[39m\u001b[32m147\u001b[39m splits = \u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43msplitter\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mRandomSplitter\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[43mitems\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    148\u001b[39m pv(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(splits)\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m datasets of sizes \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[33m'\u001b[39m\u001b[33m,\u001b[39m\u001b[33m'\u001b[39m.join([\u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mlen\u001b[39m(s))\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mfor\u001b[39;00m\u001b[38;5;250m \u001b[39ms\u001b[38;5;250m \u001b[39m\u001b[38;5;129;01min\u001b[39;00m\u001b[38;5;250m \u001b[39msplits])\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m, verbose)\n\u001b[32m    149\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m Datasets(items, tfms=\u001b[38;5;28mself\u001b[39m._combine_type_tfms(), splits=splits, dl_type=\u001b[38;5;28mself\u001b[39m.dl_type, n_inp=\u001b[38;5;28mself\u001b[39m.n_inp, verbose=verbose)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/transforms.py:95\u001b[39m, in \u001b[36mRandomSplitter.<locals>._inner\u001b[39m\u001b[34m(o)\u001b[39m\n\u001b[32m     93\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_inner\u001b[39m(o):\n\u001b[32m     94\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m seed \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m: torch.manual_seed(seed)\n\u001b[32m---> \u001b[39m\u001b[32m95\u001b[39m     rand_idx = L(\u001b[38;5;28mlist\u001b[39m(\u001b[43mtorch\u001b[49m\u001b[43m.\u001b[49m\u001b[43mrandperm\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mo\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mnumpy\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m))\n\u001b[32m     96\u001b[39m     cut = \u001b[38;5;28mint\u001b[39m(valid_pct * \u001b[38;5;28mlen\u001b[39m(o))\n\u001b[32m     97\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m rand_idx[cut:],rand_idx[:cut]\n",
      "\u001b[31mRuntimeError\u001b[39m: Numpy is not available"
     ]
    }
   ],
   "source": [
    "def is_cat(x):return x[0].isupper()\n",
    "\n",
    "dls = ImageDataLoaders.from_name_func(\n",
    "    path,get_image_files(path),valid_pct=0.2,seed=42,\n",
    "    label_func=is_cat,item_tfms=Resize(224)\n",
    ")\n",
    "learn = cnn_learner(dls,resnet34,metrics=error_rate)\n",
    "learn.fine_tune(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3aed4055",
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Numpy is not available",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mRuntimeError\u001b[39m                              Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[11]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m dls = \u001b[43mImageDataLoaders\u001b[49m\u001b[43m.\u001b[49m\u001b[43mfrom_name_func\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      2\u001b[39m \u001b[43m    \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43mget_image_files\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mvalid_pct\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m0.2\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43mseed\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m42\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[43m    \u001b[49m\u001b[43mlabel_func\u001b[49m\u001b[43m=\u001b[49m\u001b[43mis_cat\u001b[49m\u001b[43m,\u001b[49m\u001b[43mitem_tfms\u001b[49m\u001b[43m=\u001b[49m\u001b[43mResize\u001b[49m\u001b[43m(\u001b[49m\u001b[32;43m224\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/vision/data.py:151\u001b[39m, in \u001b[36mImageDataLoaders.from_name_func\u001b[39m\u001b[34m(cls, path, fnames, label_func, **kwargs)\u001b[39m\n\u001b[32m    149\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mlabel_func couldn\u001b[39m\u001b[33m'\u001b[39m\u001b[33mt be lambda function on Windows\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m    150\u001b[39m f = using_attr(label_func, \u001b[33m'\u001b[39m\u001b[33mname\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m--> \u001b[39m\u001b[32m151\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfrom_path_func\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfnames\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/vision/data.py:137\u001b[39m, in \u001b[36mImageDataLoaders.from_path_func\u001b[39m\u001b[34m(cls, path, fnames, label_func, valid_pct, seed, item_tfms, batch_tfms, img_cls, **kwargs)\u001b[39m\n\u001b[32m    131\u001b[39m \u001b[33m\"\u001b[39m\u001b[33mCreate from list of `fnames` in `path`s with `label_func`\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    132\u001b[39m dblock = DataBlock(blocks=(ImageBlock(img_cls), CategoryBlock),\n\u001b[32m    133\u001b[39m                    splitter=RandomSplitter(valid_pct, seed=seed),\n\u001b[32m    134\u001b[39m                    get_y=label_func,\n\u001b[32m    135\u001b[39m                    item_tfms=item_tfms,\n\u001b[32m    136\u001b[39m                    batch_tfms=batch_tfms)\n\u001b[32m--> \u001b[39m\u001b[32m137\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfrom_dblock\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdblock\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfnames\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m=\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/core.py:275\u001b[39m, in \u001b[36mDataLoaders.from_dblock\u001b[39m\u001b[34m(cls, dblock, source, path, bs, val_bs, shuffle, device, **kwargs)\u001b[39m\n\u001b[32m    264\u001b[39m \u001b[38;5;129m@classmethod\u001b[39m\n\u001b[32m    265\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mfrom_dblock\u001b[39m(\u001b[38;5;28mcls\u001b[39m, \n\u001b[32m    266\u001b[39m     dblock, \u001b[38;5;66;03m# `DataBlock` object\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m    273\u001b[39m     **kwargs\n\u001b[32m    274\u001b[39m ):\n\u001b[32m--> \u001b[39m\u001b[32m275\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdblock\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdataloaders\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m=\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbs\u001b[49m\u001b[43m=\u001b[49m\u001b[43mbs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mval_bs\u001b[49m\u001b[43m=\u001b[49m\u001b[43mval_bs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mshuffle\u001b[49m\u001b[43m=\u001b[49m\u001b[43mshuffle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/block.py:157\u001b[39m, in \u001b[36mDataBlock.dataloaders\u001b[39m\u001b[34m(self, source, path, verbose, **kwargs)\u001b[39m\n\u001b[32m    151\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mdataloaders\u001b[39m(\u001b[38;5;28mself\u001b[39m, \n\u001b[32m    152\u001b[39m     source, \u001b[38;5;66;03m# The data source\u001b[39;00m\n\u001b[32m    153\u001b[39m     path:\u001b[38;5;28mstr\u001b[39m=\u001b[33m'\u001b[39m\u001b[33m.\u001b[39m\u001b[33m'\u001b[39m, \u001b[38;5;66;03m# Data source and default `Learner` path \u001b[39;00m\n\u001b[32m    154\u001b[39m     verbose:\u001b[38;5;28mbool\u001b[39m=\u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;66;03m# Show verbose messages\u001b[39;00m\n\u001b[32m    155\u001b[39m     **kwargs\n\u001b[32m    156\u001b[39m ) -> DataLoaders:\n\u001b[32m--> \u001b[39m\u001b[32m157\u001b[39m     dsets = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mdatasets\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[43m=\u001b[49m\u001b[43mverbose\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    158\u001b[39m     kwargs = {**\u001b[38;5;28mself\u001b[39m.dls_kwargs, **kwargs, \u001b[33m'\u001b[39m\u001b[33mverbose\u001b[39m\u001b[33m'\u001b[39m: verbose}\n\u001b[32m    159\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m dsets.dataloaders(path=path, after_item=\u001b[38;5;28mself\u001b[39m.item_tfms, after_batch=\u001b[38;5;28mself\u001b[39m.batch_tfms, **kwargs)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/block.py:147\u001b[39m, in \u001b[36mDataBlock.datasets\u001b[39m\u001b[34m(self, source, verbose)\u001b[39m\n\u001b[32m    145\u001b[39m \u001b[38;5;28mself\u001b[39m.source = source                     ; pv(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mCollecting items from \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msource\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m, verbose)\n\u001b[32m    146\u001b[39m items = (\u001b[38;5;28mself\u001b[39m.get_items \u001b[38;5;129;01mor\u001b[39;00m noop)(source) ; pv(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mFound \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(items)\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m items\u001b[39m\u001b[33m\"\u001b[39m, verbose)\n\u001b[32m--> \u001b[39m\u001b[32m147\u001b[39m splits = \u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43msplitter\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mRandomSplitter\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[43mitems\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    148\u001b[39m pv(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(splits)\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m datasets of sizes \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[33m'\u001b[39m\u001b[33m,\u001b[39m\u001b[33m'\u001b[39m.join([\u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mlen\u001b[39m(s))\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mfor\u001b[39;00m\u001b[38;5;250m \u001b[39ms\u001b[38;5;250m \u001b[39m\u001b[38;5;129;01min\u001b[39;00m\u001b[38;5;250m \u001b[39msplits])\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m, verbose)\n\u001b[32m    149\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m Datasets(items, tfms=\u001b[38;5;28mself\u001b[39m._combine_type_tfms(), splits=splits, dl_type=\u001b[38;5;28mself\u001b[39m.dl_type, n_inp=\u001b[38;5;28mself\u001b[39m.n_inp, verbose=verbose)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/opt/miniconda3/envs/fastai/lib/python3.11/site-packages/fastai/data/transforms.py:95\u001b[39m, in \u001b[36mRandomSplitter.<locals>._inner\u001b[39m\u001b[34m(o)\u001b[39m\n\u001b[32m     93\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_inner\u001b[39m(o):\n\u001b[32m     94\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m seed \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m: torch.manual_seed(seed)\n\u001b[32m---> \u001b[39m\u001b[32m95\u001b[39m     rand_idx = L(\u001b[38;5;28mlist\u001b[39m(\u001b[43mtorch\u001b[49m\u001b[43m.\u001b[49m\u001b[43mrandperm\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mo\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mnumpy\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m))\n\u001b[32m     96\u001b[39m     cut = \u001b[38;5;28mint\u001b[39m(valid_pct * \u001b[38;5;28mlen\u001b[39m(o))\n\u001b[32m     97\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m rand_idx[cut:],rand_idx[:cut]\n",
      "\u001b[31mRuntimeError\u001b[39m: Numpy is not available"
     ]
    }
   ],
   "source": [
    "dls = ImageDataLoaders.from_name_func(\n",
    "    path,get_image_files(path),valid_pct=0.2,seed=42,\n",
    "    label_func=is_cat,item_tfms=Resize(224)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c3959f1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fastai",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
